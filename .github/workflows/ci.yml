# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Testing 1
        run: |
          $PG_VERSION = Split-Path $env:PGROOT -Leaf
          $postgis_page = "https://download.osgeo.org/postgis/windows/pg$PG_VERSION"
          
          echo "Detecting PostGIS version from $postgis_page for PG $PG_VERSION"
          $pattern = "^postgis.*zip$"
          $bundle_name = (Invoke-WebRequest -Uri $postgis_page -ErrorAction Stop).Links.Where({$_.href -match $pattern}).href
          if (!$bundle_name) {
            Write-Error "Could not find latest PostGIS version in $postgis_page that would match '$pattern'"
            exit 1
          }
          $bundle_name = [IO.Path]::ChangeExtension($bundle_name, [NullString]::Value)
          
          $postgis_url = "https://download.osgeo.org/postgis/windows/pg$PG_VERSION/$bundle_name.zip"
          echo "Downloading $bundle_name from $postgis_url"
          $postgis_zip = "postgis.zip"
          Invoke-WebRequest $postgis_url -OutFile $postgis_zip -ErrorAction Stop
          
          $postgis_dir = "downloads"
          echo "Extracting $postgis_dir\$bundle_name\*"
          Remove-Item $postgis_dir -ErrorAction SilentlyContinue
          Expand-Archive $postgis_zip -DestinationPath $postgis_dir
          Move-Item -Path "$postgis_dir\$bundle_name\*" -Destination $postgis_dir -force
          Remove-Item $postgis_zip
          if (! Test-Path "$postgis_dir\*") {
            Write-Error "Could not find PostGIS files in $postgis_dir"
            exit 1
          }
          
          
          echo "Starting PostgreSQL and adding postgis extension"
          if (! Test-Path "$postgis_dir\*") {
            Write-Error "Could not find PostGIS files in $postgis_dir"
            exit 1
          }
          Move-Item -Path "$postgis_dir\*" -Destination $env:PGROOT -force
          echo "Starting PostgreSQL and adding postgis extension"
          $env:Path = "$env:PGBIN;" + $env:Path
          & pg_ctl restart -D "$env:PGDATA"
          & pg_isready
          & psql -v ON_ERROR_STOP=1 -c "select version();"
          & psql -v ON_ERROR_STOP=1 -c "CREATE EXTENSION postgis;"
